import streamlit as st
import pandas as pd
import yfinance as yf
import time
import matplotlib.pyplot as plt

# ================== FUNCTIONS ==================

def fetch_stock_data(symbol, period):
    try:
        # Fetch data for the stock symbol
        data = yf.download(symbol, period=period, interval="1d")
        if data.empty:
            print(f"No data found for symbol: {symbol}")
            return None
        print(f"Data fetched successfully for {symbol}.")
        return data
    except Exception as e:
        print(f"Error fetching data for {symbol}: {e}")
        return None


def calculate_indicators(df, ema_fast, ema_mid, ema_slow, wr_length):
    df['EMA_Fast'] = df['Close'].ewm(span=ema_fast, adjust=False).mean()
    df['EMA_Mid'] = df['Close'].ewm(span=ema_mid, adjust=False).mean()
    df['EMA_Slow'] = df['Close'].ewm(span=ema_slow, adjust=False).mean()

    high_roll = df['High'].rolling(window=wr_length)
    low_roll = df['Low'].rolling(window=wr_length)
    df['%R'] = (high_roll.max() - df['Close']) / (high_roll.max() - low_roll.min()) * -100

    df['EMA_Aligned'] = (df['EMA_Fast'] > df['EMA_Mid']) & (df['EMA_Mid'] > df['EMA_Slow'])
    df['WR_Cross'] = (df['%R'].shift(1) <= -80) & (df['%R'] > -80)
    df['Buy_Signal'] = df['EMA_Aligned'] & df['WR_Cross']
    
    return df


# ================== STREAMLIT UI ==================

st.markdown(
    """
    <div style="text-align: center;">
        <h1>HondAlgo</h1>
        <p>Algorithm analyzes stock data and detects stocks with high bullish potential.</p>
    </div>
    """,
    unsafe_allow_html=True
)

# Sidebar for parameter inputs
st.sidebar.header("Set Parameters")
ema_fast = st.sidebar.number_input("Fast EMA Length", value=20, min_value=1)
ema_mid = st.sidebar.number_input("Mid EMA Length", value=50, min_value=1)
ema_slow = st.sidebar.number_input("Slow EMA Length", value=100, min_value=1)
wr_length = st.sidebar.number_input("Williams %R Length", value=14, min_value=1)

period = st.sidebar.selectbox(
    "Select Stock Data Period",
    options=["1d", "5d", "1 month", "3 months", "6 months", "1 year", "2 years", "5 years", "10 years", "max"],
    index=5
)

st.markdown(
    """
    <div style="text-align: center;">
        <h3>Stock Symbols</h3>
        <p>Enter stock symbols (comma-separated)</p>
    </div>
    """,
    unsafe_allow_html=True
)
symbols = st.text_area("", "AAPL, MSFT, TSLA")

# ================== ANALYSIS PROCESS ==================

if st.button("Analyze"):
    stock_symbols = [s.strip() for s in symbols.split(",") if s.strip()]
    
    if not stock_symbols:
        st.error("Please provide at least one stock symbol.")
    else:
        analyzing_placeholder = st.markdown(
            f"<div style='text-align: center; font-size: 18px;'>Analyzing {len(stock_symbols)} stocks ðŸ“ˆðŸ’¹...</div>",
            unsafe_allow_html=True
        )

        qualified_stocks = []
        unqualified_stocks = []
        lost_stocks = []
        progress = st.progress(0)
        status_placeholder = st.empty()
        step = 100 / len(stock_symbols)
        stock_icons = ["ðŸ“ˆ", "ðŸ“‰", "ðŸ’¹", "ðŸ“Š", "ðŸ’µ"]

        for i, symbol in enumerate(stock_symbols):
            current_icon = stock_icons[i % len(stock_icons)]
            status_placeholder.markdown(
                f"<div style='text-align: center; font-size: 18px;'>Analyzing {i+1}/{len(stock_symbols)}: {symbol} {current_icon}</div>",
                unsafe_allow_html=True
            )
            progress.progress(int((i + 1) * step))
            df = fetch_stock_data(symbol, period=period)

            if df is None or df.empty:
                lost_stocks.append(symbol)
                continue
            
            df = calculate_indicators(df, ema_fast, ema_mid, ema_slow, wr_length)
            if df['Buy_Signal'].iloc[-1]:
                qualified_stocks.append(symbol)
            else:
                unqualified_stocks.append(symbol)

            time.sleep(0.5)
        
        status_placeholder.empty()
        analyzing_placeholder.empty()

        st.markdown(
            f"<div style='text-align: center; font-size: 18px; color: green;'>{len(stock_symbols)} stocks have been analyzed successfully âœ…</div>",
            unsafe_allow_html=True
        )

        # Display Results
        st.markdown("### Results")

        # Qualified Stocks
        if qualified_stocks:
            st.subheader("Qualified Stocks")
            df_qualified = pd.DataFrame(qualified_stocks, columns=["Stock"])
            df_qualified.index += 1
            st.dataframe(df_qualified)
        else:
            st.write("No qualified stocks found.")

        # Unqualified Stocks
        if unqualified_stocks:
            st.subheader("Unqualified Stocks")
            df_unqualified = pd.DataFrame(unqualified_stocks, columns=["Stock"])
            df_unqualified.index += 1
            st.dataframe(df_unqualified)
        else:
            st.write("No unqualified stocks.")

        # Lost Stocks
        if lost_stocks:
            st.subheader("Lost Stocks")
            df_lost = pd.DataFrame(lost_stocks, columns=["Stock"])
            df_lost.index += 1
            st.dataframe(df_lost)
        else:
            st.write("No lost stocks.")

        # Download Results
        with pd.ExcelWriter("results.xlsx", engine="openpyxl") as writer:
            if qualified_stocks:
                df_qualified.to_excel(writer, index=False, sheet_name="Qualified Stocks")
            if unqualified_stocks:
                df_unqualified.to_excel(writer, index=False, sheet_name="Unqualified Stocks")
            if lost_stocks:
                df_lost.to_excel(writer, index=False, sheet_name="Lost Stocks")

        with open("results.xlsx", "rb") as file:
            st.download_button(
                label="Download Results as Xlsx",
                data=file,
                file_name="HondAlgo_Results.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
